import apiRequest from "./apirequest.js";

/* A small data model to represent a Post. */
export class Post {
  /* data is the post data from the API. */
  constructor(data) {
    /* Technically we don't have a full User object here (no followers list), but this is still useful. */
    this.user = new User(data.user);
    this.time = new Date(data.time);
    this.text = data.text;
  }
}

/* A data model representing a user of the app. */
export default class User {
  /* Returns an array of user IDs. */
  static async listUsers() {
    let data = await apiRequest("GET", "/users");
    return data.result;
  }

  /* Returns a User instance, creating the user if necessary. */
  static async loadOrCreate(id) {
    let list = await this.listUsers();
    if (!list.includes(id)) {
      let user = await apiRequest("POST", `/users`, {
        id: id,
        name: id,
        following: []
      });
      return user;
    }
    if (await apiRequest("GET", `/users/${id}`)) {
      return await apiRequest("GET", `/users/${id}`);
    }
  }

  /* data is the user object from the API. */
  constructor(data) {
    Object.assign(this, data);
    this.makePost = this.makePost.bind(this);
  }

  /* The string representation of a User is their display name. */
  toString() {
    return this.name;
  }

  /* Returns an Object containing only the instances variables we want to send back to the API when we save() the user. */
  toJSON() {
    let info = {};
    let res = Object.assign(info, this);
    return res;
  }

  /* Save the current state (name and avatar URL) of the user to the server. */
  async save() {
    let save = await apiRequest("PATCH", `/users/${this.id}`, this.toJSON());
    return save;
  }

  /* Gets the user's current feed. Returns an Array of Post objects. */
  async getFeed() {
    let post = await apiRequest("GET", `/users/${this.id}/feed`);
    post = post.posts;
    return post;
  }

  /* Create a new post with the given text. */
  async makePost(text, cl) {
    return await apiRequest("POST", `/users/${this.id}/posts/${cl}`, { text: text });
  }

  /* Start following the specified user id. Does not handle any HTTPErrors generated by the API. */
  async addFollow(id) {
    await apiRequest("POST", `/users/${this.id}/following?target=${id}`, { id: this.id } );
  }

  /* Stop following the specified user id. Does not handle any HTTPErrors generated by the API. */
  async deleteFollow(id) {
    await apiRequest("DELETE", `/users/${this.id}/follow?target=${id}`, { id: id });
  }
}

window.User = User;
